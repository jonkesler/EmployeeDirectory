{"version":3,"sources":["utils/API.js","components/Search/index.js","components/Table/index.js","components/Container/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","SearchBox","props","className","onChange","handleInputChange","value","id","type","name","list","placeholder","Table","onClick","sortByFirstName","results","map","result","key","login","uuid","src","picture","medium","alt","first","last","cell","href","email","format","dob","date","Container","state","search","employees","filteredEmployees","order","filtereds","sorteds","sort","a","b","console","log","setState","event","UserInput","target","filter","employee","toLowerCase","indexOf","employeeSearch","API","then","res","data","catch","err","Search","this","handleSearch","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.15c60839.chunk.js","sourcesContent":["import axios from \"axios\";\nexport default {\n    // Gets all users\n    getUsers: function () {\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n    }\n};\n","import React from \"react\"\r\nimport \"./search.css\";\r\n\r\nfunction SearchBox(props) {\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <header>\r\n                 {/* className=\"z-depth-3 col s12\" > */}\r\n                <div className=\"row\">\r\n                    <div className=\"col s6\">\r\n                        <h3 className=\"right-align headerText\">Employee Directory</h3>\r\n                    </div>\r\n                    <div className=\"col s6 \">\r\n                        <div className=\"col s6 input right-align \">\r\n                            <input\r\n                                onChange={props.handleInputChange}\r\n                                value={props.value}\r\n                                id=\"employees\"\r\n                                type=\"text\"\r\n                                name=\"search\"\r\n                                list=\"employee\"\r\n                                className=\" inputBox  \"\r\n                                placeholder=\"Start typing here to search by first name\" />\r\n                        </div>\r\n                        <div className=\"col m4\">\r\n                            {/* <button\r\n                                type=\"submit\"\r\n                                value=\"\"\r\n                                className=\" btn z-depth-2 waves-effect  searchBttn\"\r\n                                onClick={props.handleSearch} >Search</button> */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React from \"react\";\r\nimport Moment from 'react-moment';\r\nimport \"./style.css\";\r\n\r\nfunction Table(props) {\r\n      return (\r\n        <table className=\"tableEmployee \">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th onClick={props.sortByFirstName}>First Name </th>\r\n                    <th>Last Name</th>\r\n                    <th>Phone</th>\r\n                    <th>E-mail</th>\r\n                    <th>DOB</th>\r\n                </tr>\r\n            </thead>\r\n\r\n            <tbody className= \"\">\r\n                {props.results.map(result => (\r\n                    <tr className=\"table\" key={result.login.uuid}>\r\n                        <td> <img className=\"\r\n                        \"src={result.picture.medium} alt=\"\" /></td>\r\n                        <td>{result.name.first}</td>\r\n                        <td>{result.name.last}</td>\r\n                        <td>{result.cell}</td>\r\n                        <td className=\"email\"><a href=\"mailto:{result.email}\">{result.email}</a></td>\r\n                        <td><Moment format=\"MM/DD/YYYY\">{result.dob.date}</Moment></td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table >\r\n    )\r\n}\r\n\r\nexport default Table","import API from \"../../utils/API\";\r\nimport React, { Component } from \"react\";\r\nimport Search from \"../Search/index\";\r\nimport Table from \"../Table/index\";\r\nimport \"./container.css\";\r\n\r\nclass Container extends Component {\r\n\r\n    state = {\r\n        search: \"\",\r\n        employees: [],\r\n        filteredEmployees: [],\r\n        order: \"\"\r\n    };\r\n\r\n    // get data to load page\r\n    componentDidMount() {\r\n        API.getUsers().then(res => this.setState({\r\n            employees: res.data.results,\r\n            filteredEmployees: res.data.results\r\n        })).catch(err => console.log(err))\r\n    }\r\n\r\n    // Sort by First Name\r\n    sortByFirstName = () => {\r\n        const filtereds = this.state.filteredEmployees;\r\n        if (this.state.order === \"asc\") {\r\n            const sorteds = filtereds.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1)\r\n            console.log(sorteds)\r\n            this.setState({\r\n                filteredEmployees: sorteds,\r\n                order: \"desc\"\r\n            })\r\n        } else {\r\n            const sorteds = filtereds.sort((a, b) => (a.name.first > b.name.first) ? -1 : 1)\r\n            console.log(sorteds)\r\n            this.setState({\r\n                filteredEmployees: sorteds,\r\n                order: \"asc\"\r\n            })\r\n        }\r\n    }\r\n\r\n    //match while typing in search field\r\n    handleInputChange = event => {\r\n        const employees = this.state.employees;\r\n        const UserInput = event.target.value;\r\n        const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().indexOf(UserInput.toLowerCase()) > -1)\r\n        this.setState({\r\n            filteredEmployees,\r\n        });\r\n    };\r\n\r\n    employeeSearch = () => {\r\n        API.getUsers()\r\n            .then(res => this.setState({\r\n                filteredEmployees: res.data.results,\r\n                employees: res.data.results\r\n            }))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Search\r\n                    employee={this.state.employees}\r\n                    handleSearch={this.handleSearch}\r\n                    handleInputChange={this.handleInputChange} \r\n                />\r\n                <Table results={this.state.filteredEmployees}\r\n                    sortByFirstName={this.sortByFirstName}\r\n                />\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Container","import React from 'react';\nimport Container from \"./components/Container/index\"\n\n\nfunction App() {\n  return (\n    <Container />\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n          // Our service worker won't work if PUBLIC_URL is on a different origin\n          // from what our page is served on. This might happen if a CDN is used to\n          // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n          return;\n      }\n\n      window.addEventListener('load', () => {\n          const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n          if (isLocalhost) {\n              // This is running on localhost. Let's check if a service worker still exists or not.\n              checkValidServiceWorker(swUrl, config);\n\n              // Add some additional logging to localhost, pointing developers to the\n              // service worker/PWA documentation.\n              navigator.serviceWorker.ready.then(() => {\n                  console.log(\n                      'This web app is being served cache-first by a service ' +\n                      'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                  );\n              });\n          } else {\n              // Is not localhost. Just register service worker\n              registerValidSW(swUrl, config);\n          }\n      });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n          registration.onupdatefound = () => {\n              const installingWorker = registration.installing;\n              if (installingWorker == null) {\n                  return;\n              }\n              installingWorker.onstatechange = () => {\n                  if (installingWorker.state === 'installed') {\n                      if (navigator.serviceWorker.controller) {\n                          // At this point, the updated precached content has been fetched,\n                          // but the previous service worker will still serve the older\n                          // content until all client tabs are closed.\n                          console.log(\n                              'New content is available and will be used when all ' +\n                              'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                          );\n\n                          // Execute callback\n                          if (config && config.onUpdate) {\n                              config.onUpdate(registration);\n                          }\n                      } else {\n                          // At this point, everything has been precached.\n                          // It's the perfect time to display a\n                          // \"Content is cached for offline use.\" message.\n                          console.log('Content is cached for offline use.');\n\n                          // Execute callback\n                          if (config && config.onSuccess) {\n                              config.onSuccess(registration);\n                          }\n                      }\n                  }\n              };\n          };\n      })\n      .catch(error => {\n          console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' }\n  })\n      .then(response => {\n          // Ensure service worker exists, and that we really are getting a JS file.\n          const contentType = response.headers.get('content-type');\n          if (\n              response.status === 404 ||\n              (contentType != null && contentType.indexOf('javascript') === -1)\n          ) {\n              // No service worker found. Probably a different app. Reload the page.\n              navigator.serviceWorker.ready.then(registration => {\n                  registration.unregister().then(() => {\n                      window.location.reload();\n                  });\n              });\n          } else {\n              // Service worker found. Proceed as normal.\n              registerValidSW(swUrl, config);\n          }\n      })\n      .catch(() => {\n          console.log(\n              'No internet connection found. App is running in offline mode.'\n          );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n          registration.unregister();\n      });\n  }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}